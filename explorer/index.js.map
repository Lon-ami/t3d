{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/index.js","src/renderer.js","src/ui.js"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClnfile":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const AppRenderer = require(\"./renderer\");\nconst UI = require(\"./ui\");\n\nconst stats = new Stats();\n$(\"body\").append(stats.domElement);\n$(stats.domElement).hide();\nstats.toggle = () => $(stats.domElement).toggle();\n\nconst appRenderer = new AppRenderer(stats);\nconst ui = new UI(appRenderer);\n\nui.init();\n\n// Allow user to access appRenderer\n// This is not used by the app itself\nglobal.appRenderer = appRenderer;\nglobal.ui = ui;\nglobal.stats = stats;\n","const CANVAS_CLEAR_COLOR = 0x342920;\nconst FOG_LENGTH = 5000;\n\nclass AppRenderer {\n  constructor(stats) {\n    this.localReader = undefined;\n    this._threeContext = {};\n    this._mapMeshes = [];\n    this._mapContext = undefined;\n    this._renderOptions = undefined;\n    this.stats = stats;\n\n    // Defaults\n    this.fog = 25000;\n    this.movementSpeed = 10000;\n    this.lightIntensity = 0.5;\n    this.loadedMapID = undefined;\n    this.controllerType = \"fly\";\n\n    this.webGLRendererOptions = {\n      sortObjects: false,\n      logarithmicDepthBuffer: true,\n      stencil: false,\n      premultipliedAlpha: false,\n      antialiasing: true,\n    };\n  }\n\n  /** PUBLIC methods */\n  createLocalReader(file, callback) {\n    this.localReader = T3D.getLocalReader(file, callback, \"./static/t3dworker.js\");\n  }\n\n  getMapList() {\n    return this.localReader.getMapList();\n  }\n\n  scanArchiveForMaps() {\n    return this.localReader.readFileList();\n  }\n\n  loadMap(mapId, renderOptions, callback) {\n    if (this.loadedMapID) {\n      this.cleanupMap();\n    }\n\n    this.loadedMapID = mapId;\n    this._renderOptions = renderOptions;\n\n    const renderers = [\n      { renderClass: T3D.EnvironmentRenderer, settings: {} },\n      { renderClass: T3D.TerrainRenderer, settings: {} },\n    ];\n\n    if (renderOptions.zone) {\n      renderers.push({ renderClass: T3D.ZoneRenderer, settings: { visible: true } });\n    }\n    if (renderOptions.props) {\n      renderers.push({ renderClass: T3D.PropertiesRenderer, settings: { visible: true } });\n    }\n    if (renderOptions.collisions) {\n      renderers.push({ renderClass: T3D.HavokRenderer, settings: { visible: true } });\n    }\n\n    T3D.renderMapContentsAsync(this.localReader, this.loadedMapID, renderers, (context) => {\n      this._loadMapCallback(context, renderOptions, callback);\n    });\n  }\n\n  setFogDistance(value) {\n    this.fog = value;\n    if (this._threeContext.scene && this._threeContext.scene.fog) {\n      this._threeContext.scene.fog.near = this.fog;\n      this._threeContext.scene.fog.far = this.fog + FOG_LENGTH;\n    }\n    if (this._threeContext.camera) {\n      this._threeContext.camera.far = this.fog + FOG_LENGTH;\n      this._threeContext.camera.updateProjectionMatrix();\n    }\n  }\n\n  setMovementSpeed(value) {\n    this.movementSpeed = value;\n    if (this._threeContext.controls) {\n      this._threeContext.controls.movementSpeed = value;\n    }\n  }\n\n  move(x, y, z) {\n    if (x) {\n      this._threeContext.controls.object.position.x = x;\n    }\n    if (y) {\n      this._threeContext.controls.object.position.y = y;\n    }\n    if (z) {\n      this._threeContext.controls.object.position.z = z;\n    }\n  }\n\n  rotate(rx, ry, rz) {\n    if (rx) {\n      this._threeContext.controls.object.rotation.x = rx;\n    }\n    if (ry) {\n      this._threeContext.controls.object.rotation.y = ry;\n    }\n    if (rz) {\n      this._threeContext.controls.object.rotation.z = rz;\n    }\n  }\n\n  setLightIntensity(value) {\n    this.lightIntensity = value;\n    if (this._threeContext.sceneLights) {\n      for (const light of this._threeContext.sceneLights) {\n        light.intensity = value;\n      }\n    }\n  }\n\n  takeScreenShot() {\n    const newWindow = window.open(\"\", \"\");\n    newWindow.document.title = \"T3D Explorer Screenshot\";\n    const image = new Image();\n\n    this._threeContext.renderer.clear(this._threeContext.renderer.getClearColor());\n    // Render first skyCamera\n    this._threeContext.renderer.render(this._threeContext.skyScene, this._threeContext.skyCamera);\n    this._threeContext.renderer.render(this._threeContext.scene, this._threeContext.camera);\n    image.src = this._threeContext.renderer.domElement.toDataURL();\n    newWindow.document.body.appendChild(image);\n  }\n\n  setupController(controllerType = \"fly\") {\n    if (this._threeContext.controls) {\n      this._threeContext.controls.dispose();\n    }\n\n    if (controllerType === \"orbital\") {\n      this._threeContext.controls = new THREE.OrbitControls(\n        this._threeContext.camera,\n        this._threeContext.renderer.domElement\n      );\n\n      this._threeContext.controls.enableZoom = true;\n    } else if (controllerType === \"fly\") {\n      this._threeContext.controls = new THREE.FlyControls(\n        this._threeContext.camera,\n        this._threeContext.renderer.domElement\n      );\n\n      this._threeContext.controls.movementSpeed = this.movementSpeed;\n      this._threeContext.controls.rollSpeed = Math.PI / 6;\n      this._threeContext.controls.autoForward = false;\n      this._threeContext.controls.dragToLook = true;\n    } else {\n      throw new Error(\"Invalid controller type\");\n    }\n\n    this.controllerType = controllerType;\n  }\n\n  cleanupMap() {\n    this._mapContext = undefined;\n    this._renderOptions = undefined;\n    this.loadedMapID = undefined;\n    for (const mesh of this._mapMeshes) {\n      this._threeContext.scene.remove(mesh);\n    }\n    for (const skyBox of this._threeContext.skyScene.children) {\n      this._threeContext.skyScene.remove(skyBox);\n    }\n    this._mapMeshes = [];\n  }\n\n  setupScene() {\n    const { _threeContext: context } = this;\n\n    context.camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 100000);\n    context.skyCamera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 100000);\n    context.scene = new THREE.Scene();\n    context.skyScene = new THREE.Scene();\n    context.clock = new THREE.Clock();\n\n    context.ambientLight = new THREE.AmbientLight(0x555555);\n    context.scene.add(context.ambientLight);\n\n    context.sceneLights = [\n      new THREE.DirectionalLight(0xffffff, this.lightIntensity),\n      new THREE.DirectionalLight(0xffffff, this.lightIntensity),\n      new THREE.DirectionalLight(0xffffff, this.lightIntensity),\n    ];\n    context.sceneLights[0].position.set(0, 0, 1);\n    context.sceneLights[0].position.set(0, 1, 0);\n    context.sceneLights[0].position.set(1, 0, 0);\n    for (const light of context.sceneLights) {\n      context.scene.add(light);\n    }\n\n    context.scene.fog = new THREE.Fog(0xffffff, this.fog, this.fog + FOG_LENGTH);\n    context.camera.far = this.fog + FOG_LENGTH;\n    context.camera.updateProjectionMatrix();\n\n    this.setupWebGLRenderer(true);\n    this.setupController();\n    this._render();\n  }\n\n  onWindowResize() {\n    const { _threeContext: context } = this;\n    if (context.renderer && context.camera && context.skyCamera) {\n      context.camera.aspect = window.innerWidth / window.innerHeight;\n      context.camera.updateProjectionMatrix();\n      context.renderer.setSize(window.innerWidth, window.innerHeight);\n      context.skyCamera.aspect = window.innerWidth / window.innerHeight;\n      context.skyCamera.updateProjectionMatrix();\n    }\n  }\n\n  // This function is safe to be called whenever the active webgl context is not rendering on screen\n  setupWebGLRenderer(hidden) {\n    const { _threeContext: context } = this;\n    const oldRenderer = context.renderer;\n    context.renderer = new THREE.WebGLRenderer(this.webGLRendererOptions);\n    context.renderer.autoClear = false;\n    context.renderer.setSize(window.innerWidth, window.innerHeight);\n    context.renderer.setClearColor(CANVAS_CLEAR_COLOR);\n    if (hidden) {\n      $(context.renderer.domElement).hide();\n    }\n    if (oldRenderer) {\n      $(oldRenderer.domElement).remove();\n    }\n    $(\"#explorer\").append(context.renderer.domElement);\n  }\n\n  getUrlData() {\n    const controls = this._threeContext.controls;\n    const pos = controls.object.position;\n    const rot = controls.object.rotation;\n    return {\n      map: this.loadedMapID,\n      x: Math.round(pos.x * 1000) / 1000,\n      y: Math.round(pos.y * 1000) / 1000,\n      z: Math.round(pos.z * 1000) / 1000,\n      rx: Math.round(rot.x * 10000) / 10000,\n      ry: Math.round(rot.y * 10000) / 10000,\n      rz: Math.round(rot.z * 10000) / 10000,\n      cameraType: this.controllerType,\n      loadZone: !!this._renderOptions.zone,\n      loadProp: !!this._renderOptions.props,\n      showHavok: !!this._renderOptions.collisions,\n      fog: this.fog,\n    };\n  }\n\n  /** PRIVATE methods */\n  _render() {\n    this.stats.update();\n    window.requestAnimationFrame(() => this._render());\n    this._threeContext.controls.update(this._threeContext.clock.getDelta());\n\n    this._threeContext.renderer.clear(this._threeContext.renderer.getClearColor());\n\n    // Render first skyCamera\n    this._threeContext.skyCamera.quaternion.copy(this._threeContext.camera.quaternion);\n    this._threeContext.renderer.render(this._threeContext.skyScene, this._threeContext.skyCamera);\n\n    this._threeContext.renderer.render(this._threeContext.scene, this._threeContext.camera);\n  }\n\n  _loadMapCallback(context, renderOptions, externalCallback) {\n    this._mapContext = context;\n\n    // Add all the data from the context to the threejs scene\n    for (const tile of T3D.getContextValue(context, T3D.TerrainRenderer, \"terrainTiles\")) {\n      this._threeContext.scene.add(tile);\n      this._mapMeshes.push(tile);\n    }\n    const water = T3D.getContextValue(context, T3D.TerrainRenderer, \"water\");\n    this._threeContext.scene.add(water);\n    this._mapMeshes.push(water);\n\n    const skyBox = T3D.getContextValue(context, T3D.EnvironmentRenderer, \"skyBox\");\n    this._threeContext.skyScene.add(skyBox);\n    const hazeColor = T3D.getContextValue(context, T3D.EnvironmentRenderer, \"hazeColor\");\n    if (hazeColor) {\n      this._threeContext.renderer.setClearColor(\n        new THREE.Color(hazeColor[2] / 255, hazeColor[1] / 255, hazeColor[0] / 255)\n      );\n    }\n\n    if (renderOptions.zone) {\n      for (const zoneModel of T3D.getContextValue(context, T3D.ZoneRenderer, \"meshes\")) {\n        this._threeContext.scene.add(zoneModel);\n        this._mapMeshes.push(zoneModel);\n      }\n    }\n    if (renderOptions.props) {\n      for (const propModel of T3D.getContextValue(context, T3D.PropertiesRenderer, \"meshes\")) {\n        this._threeContext.scene.add(propModel);\n        this._mapMeshes.push(propModel);\n      }\n    }\n    if (renderOptions.collisions) {\n      for (const collModel of T3D.getContextValue(context, T3D.HavokRenderer, \"meshes\")) {\n        this._threeContext.scene.add(collModel);\n        this._mapMeshes.push(collModel);\n      }\n    }\n\n    // Move camera\n    const bounds = T3D.getContextValue(context, T3D.TerrainRenderer, \"bounds\");\n    this._resetCameraLocation(bounds);\n\n    // If set fog is too small to see the map we increase it\n    if (this.fog < bounds.y2 * 1.5) {\n      this.setFogDistance(bounds.y2 * 2);\n    }\n\n    return externalCallback();\n  }\n\n  _resetCameraLocation(bounds) {\n    if (this.controllerType === \"fly\") {\n      this._threeContext.camera.position.x = 0;\n      this._threeContext.camera.position.y = bounds ? bounds.y2 : 0;\n      this._threeContext.camera.position.z = 0;\n      this._threeContext.camera.rotation.x = (-90 * Math.PI) / 180;\n    } else {\n      this._threeContext.camera.position.x = 0;\n      this._threeContext.camera.position.y = 0;\n      this._threeContext.camera.position.z = 0;\n    }\n  }\n}\n\nmodule.exports = AppRenderer;\n","class UI {\n  constructor(appRenderer) {\n    this.appRenderer = appRenderer;\n\n    this.showingProgress = false;\n    this.archiveLoaded = false;\n    this.mapFileList = [];\n    this.autoLoad = undefined;\n    this.shouldUpdateUrl = false;\n\n    this.urlUpdateInterval = setInterval(() => this.updateUrl(), 100);\n    this.lastUrlData = \"\";\n  }\n\n  init() {\n    this.appRenderer.setupScene();\n\n    T3D.Logger.logFunctions[T3D.Logger.TYPE_PROGRESS] = (name, value) => {\n      console.log(name, value);\n      if (this.showingProgress) {\n        $(\"#loadingName\").text(name);\n        $(\"#loadingValue\").text(`${value}%`);\n      }\n    };\n\n    T3D.Logger.logFunctions[T3D.Logger.TYPE_ERROR] = (error) => {\n      console.error(error);\n      // If we receive an error before the archive is loaded that means that parsing the archive failed\n      if (!this.archiveLoaded) {\n        $(\"#intro\").fadeIn();\n      }\n    };\n\n    this.setupIntro();\n    this.setupMapChoice();\n    this.setupMapExplorer();\n\n    this.appRenderer.setMovementSpeed(parseInt($(\"#mvntSpeedRange\").val(), 10));\n    this.appRenderer.setFogDistance(parseInt($(\"#fogRange\").val(), 10));\n    this.appRenderer.renderHook = (data) => this.updateUrl(data);\n\n    $(\"canvas\").on(\"wheel\", (event) => this.onMouseWheel(event));\n\n    this.checkAutoLoad();\n  }\n\n  /*\n   * SETUPS\n   */\n  setupIntro() {\n    $(\"#filePickerInput\").on(\"change\", (event) => this.onFileSelected(event));\n    $(\"#filePickerButton\").on(\"click\", () => $(\"#filePickerInput\").trigger(\"click\"));\n  }\n  setupMapChoice() {\n    $(\"#categorySelect\").on(\"change\", () => this.genMapSelect());\n    $(\"#mapLoadButton\").on(\"click\", () => this.onMapLoadClick());\n    $(\"#scanMapLink\").on(\"click\", () => this.onScanMapClick());\n  }\n  setupMapExplorer() {\n    $(\"#switchControllerType\").on(\"click\", () => {\n      if (this.appRenderer.controllerType === \"fly\") {\n        this.appRenderer.setupController(\"orbital\");\n      } else {\n        this.appRenderer.setupController(\"fly\");\n      }\n    });\n    $(\"#goToMapSelectButton\").on(\"click\", () => this.onBackToMapSelect());\n    $(\"#takeScreenshot\").on(\"click\", () => this.appRenderer.takeScreenShot());\n    $(\"#mvntSpeedRange\").on(\"change\", (event) => this.appRenderer.setMovementSpeed(event.target.valueAsNumber));\n    $(\"#fogRange\").on(\"change\", (event) => this.appRenderer.setFogDistance(event.target.valueAsNumber));\n\n    window.addEventListener(\"resize\", () => this.appRenderer.onWindowResize());\n  }\n\n  /*\n   * HANDLERS\n   */\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    $(\"#intro\").slideUp(() => {\n      this.appRenderer.createLocalReader(file, async () => {\n        this.archiveLoaded = true;\n        this.mapFileList = await this.appRenderer.getMapList();\n        this.fillMapChoiceSelect();\n        // User might enter an non-existant ID so we only trigger autoload if we find the map\n        if (this.autoLoad && this.mapFileList.find((i) => i.baseId === this.autoLoad.map)) {\n          return this.onAutoLoad();\n        }\n        $(\"#choose-map\").fadeIn();\n      });\n    });\n  }\n\n  onAutoLoad() {\n    const mapId = this.autoLoad.map;\n    const renderOptions = {\n      zone: this.autoLoad.loadZone === undefined ? false : this.autoLoad.loadZone,\n      props: this.autoLoad.loadProp === undefined ? true : this.autoLoad.loadProp,\n      collisions: this.autoLoad.showHavok === undefined ? false : this.autoLoad.showHavok,\n    };\n    this.showingProgress = true;\n    $(\"#loading-ui\").fadeIn();\n    this.appRenderer.loadMap(mapId, renderOptions, () => {\n      this.appRenderer.setupController(this.autoLoad.cameraType || \"fly\");\n      this.appRenderer.move(this.autoLoad.x, this.autoLoad.y, this.autoLoad.z);\n      this.appRenderer.rotate(this.autoLoad.rx, this.autoLoad.ry, this.autoLoad.rz);\n      // Don't forget to cleanup autoLoad, if not it might break map choice UI\n      this.autoLoad = undefined;\n      this.onMapLoaded();\n    });\n  }\n\n  onMapLoadClick() {\n    // Anti aliasing option can only be enabled when creating the webgl context\n    // So we update that first if needed\n    const aaEnabled = $(\"#enableAA\").is(\":checked\");\n    if (this.appRenderer.webGLRendererOptions.antialiasing !== aaEnabled) {\n      this.appRenderer.webGLRendererOptions.antialiasing = aaEnabled;\n      this.appRenderer.setupWebGLRenderer(true);\n    }\n\n    const mapId = $(\"#mapSelect\").val();\n    const renderOptions = {\n      zone: $(\"#loadZone\").is(\":checked\"),\n      props: $(\"#loadProps\").is(\":checked\"),\n      collisions: $(\"#loadColl\").is(\":checked\"),\n    };\n    $(\"#choose-map\").slideUp(() => {\n      this.showingProgress = true;\n      $(\"#loading-ui\").fadeIn();\n    });\n    this.appRenderer.loadMap(mapId, renderOptions, () => {\n      // Reset the position of the camera if we already loaded a previous map\n      this.appRenderer.setupController();\n      this.onMapLoaded();\n    });\n  }\n\n  onMapLoaded() {\n    this.showingProgress = false;\n    $(\"#loading-ui\").slideUp(() => {\n      $(\"canvas\").fadeIn();\n      $(\"#controls\").fadeIn();\n      $(\"#loadingName\").text(\"Loading...\");\n      $(\"#loadingValue\").text(\"\");\n    });\n    // Sync the input ranges with their value in the appRenderer\n    $(\"#fogRange\").val(this.appRenderer.fog);\n    $(\"#mvntSpeedRange\").val(this.appRenderer.movementSpeed);\n    this.shouldUpdateUrl = true;\n  }\n\n  onBackToMapSelect() {\n    $(\"#controls\").slideUp(() => {\n      $(\"canvas\").hide(0);\n      $(\"#choose-map\").fadeIn();\n      this.appRenderer.cleanupMap();\n      this.updateUrl(true);\n      this.shouldUpdateUrl = false;\n    });\n  }\n\n  onFileScanDone() {\n    this.showingProgress = false;\n    $(\"#loading-ui\").slideUp(() => {\n      $(\"#choose-map\").fadeIn();\n      $(\"#loadingName\").text(\"Loading...\");\n      $(\"#loadingValue\").text(\"\");\n    });\n  }\n\n  onScanMapClick() {\n    $(\"#choose-map\").slideUp(() => {\n      $(\"#loadingName\").text(\"Scanning...\");\n      this.showingProgress = true;\n      $(\"#loading-ui\").fadeIn(async () => {\n        await this.appRenderer.scanArchiveForMaps();\n        this.mapFileList = await this.appRenderer.getMapList();\n        this.fillMapChoiceSelect();\n        this.onFileScanDone();\n      });\n    });\n  }\n\n  onMouseWheel(event) {\n    const newSpeed =\n      event.originalEvent.deltaY < 0\n        ? Math.min(this.appRenderer.movementSpeed + 100, 10000)\n        : Math.max(this.appRenderer.movementSpeed - 100, 500);\n\n    this.appRenderer.setMovementSpeed(newSpeed);\n    $(\"#mvntSpeedRange\").val(newSpeed);\n  }\n\n  /* UTILS */\n\n  /**\n   * This function generates the content of the map selector\n   * and NOT the category one\n   */\n  genMapSelect() {\n    const category = $(\"#categorySelect\").val();\n    $(\"#mapSelect\").empty();\n    for (const map of this.mapFileList) {\n      if (map.category === category) {\n        const opt = document.createElement(\"option\");\n        opt.value = map.baseId;\n        opt.innerHTML = map.name;\n        $(\"#mapSelect\").append(opt);\n      }\n    }\n  }\n\n  /**\n   * This function generates the content of the category selector\n   * and NOT the map one\n   */\n  fillMapChoiceSelect() {\n    const categoryList = this.mapFileList.reduce((categories, map) => {\n      if (categories.indexOf(map.category) === -1) {\n        categories.push(map.category);\n      }\n      return categories;\n    }, []);\n    for (const category of categoryList) {\n      const opt = document.createElement(\"option\");\n      opt.value = category;\n      opt.innerHTML = category;\n      $(\"#categorySelect\").append(opt);\n    }\n    this.genMapSelect();\n  }\n\n  updateUrl(shouldClear = false) {\n    if (this.shouldUpdateUrl) {\n      if (shouldClear) {\n        window.location.hash = \"\";\n      } else {\n        const urlData = $.param(this.appRenderer.getUrlData());\n        if (this.lastUrlData !== urlData) {\n          window.location.hash = urlData;\n          this.lastUrlData = urlData;\n        }\n      }\n    }\n  }\n\n  checkAutoLoad() {\n    const urlData = getParsedUrl();\n    if (urlData.map) {\n      this.autoLoad = urlData;\n    }\n  }\n}\n\nfunction getParsedUrl() {\n  const data = deparam(window.location.hash.slice(1));\n  data.map = data.map ? parseInt(data.map) : undefined;\n  data.x = data.x ? parseInt(data.x) : undefined;\n  data.y = data.y ? parseInt(data.y) : undefined;\n  data.z = data.z ? parseInt(data.z) : undefined;\n  data.rx = data.rx ? parseFloat(data.rx) : undefined;\n  data.ry = data.ry ? parseFloat(data.ry) : undefined;\n  data.rz = data.rz ? parseFloat(data.rz) : undefined;\n  data.loadZone = data.loadZone ? data.loadZone === \"true\" : undefined;\n  data.loadProp = data.loadProp ? data.loadProp === \"true\" : undefined;\n  data.showHavok = data.showHavok ? data.showHavok === \"true\" : undefined;\n  data.fog = data.fog ? parseInt(data.fog) : undefined;\n\n  // Backward compatibility with Tyria3DApp\n  if (data.pitch && data.yaw) {\n    const pitch = parseFloat(data.pitch);\n    const yaw = parseFloat(data.yaw);\n    // convert pitch yaw to xyz rotations:\n    data.rx = -Math.cos(yaw) * Math.cos(pitch);\n    data.ry = Math.sin(yaw) * Math.cos(pitch);\n    data.rz = -Math.sin(pitch);\n  }\n\n  return data;\n}\n\nfunction deparam(queryString) {\n  try {\n    const parameters = {};\n    const chunks = queryString.split(\"&\");\n    for (const chunk of chunks) {\n      const [key, value] = chunk.split(\"=\");\n      parameters[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n    return parameters;\n  } catch (error) {\n    console.error(error);\n    return {};\n  }\n}\n\nmodule.exports = UI;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}