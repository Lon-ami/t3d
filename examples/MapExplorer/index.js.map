{"version":3,"sources":["MapExplorer/node_modules/browser-pack/_prelude.js","MapExplorer/src/MapExplorer/index.js","MapExplorer/src/MapExplorer/renderer.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const AppRenderer = require(\"./renderer\");\n\nconst stats = new Stats();\n$(\"body\").append(stats.domElement);\n$(stats.domElement).hide();\nstats.toggle = () => $(stats.domElement).toggle();\nglobal.stats = stats;\n\n/// Extend Original Logger\nconst myLogger = {\n  lastMessageType: null,\n  log: function () {\n    const htmlOutput = $(\"#log\");\n    const str = Array.prototype.slice.call(arguments, 1).join(\" \");\n    if (arguments[1] === myLogger.lastMessageType) {\n      $(\"#log p:last-of-type\")[0].innerHTML = str;\n    } else {\n      htmlOutput.append($(\"<p>-------------</p>\"));\n      htmlOutput.append($(\"<p>\" + str + \"</p>\"));\n    }\n    htmlOutput[0].scrollTop = htmlOutput[0].scrollHeight;\n    myLogger.lastMessageType = arguments[1];\n  },\n};\n\nconst mapRenderer = new AppRenderer(myLogger);\n\n$(document).ready(function () {\n  /// Build TREE scene\n  mapRenderer.init();\n\n  /// Handle file pick\n  $(\"#filePicker\").change(function (evt) {\n    const file = evt.target.files[0];\n    // Disable button\n    $(\"#filePicker\").prop(\"disabled\", true);\n\n    mapRenderer.createLocalReader(file, onReaderCreated);\n  });\n\n  /// Handle button click\n  $(\"#loadMapBtn\").click(onLoadMapClick);\n});\n\n/// Callback for when the LocalReader has finished setting up!\nasync function onReaderCreated() {\n  const mapFileList = await mapRenderer.getMapList();\n  const categoryList = mapFileList.reduce((list, map) => {\n    if (!list.includes(map.category)) {\n      list.push(map.category);\n    }\n    return list;\n  }, []);\n  for (const category of categoryList) {\n    const opt = document.createElement(\"option\");\n    opt.disabled = true;\n    opt.innerHTML = category;\n    $(\"#fileMapSelect\").append(opt);\n\n    for (const map of mapFileList.filter((m) => m.category === category)) {\n      const opt = document.createElement(\"option\");\n      opt.value = map.baseId;\n      opt.innerHTML = map.name; // whatever property it has\n      if (map.baseId === 294938) {\n        opt.setAttribute(\"selected\", true);\n      }\n\n      // then append it to the select element\n      $(\"#fileMapSelect\").append(opt);\n    }\n  }\n\n  $(\"#fileMapSelect\").removeAttr(\"disabled\");\n  $(\"#loadMapBtn\").removeAttr(\"disabled\");\n}\n\n/// The insterresting part!\nfunction onLoadMapClick() {\n  $(\"#loadMapBtn\").prop(\"disabled\", true);\n  $(\"#loadCollBtn\").click(loadCollModels);\n  $(\"#loadCollBtn\").removeAttr(\"disabled\");\n  $(\"#loadPropsBtn\").click(loadPropModels);\n  $(\"#loadPropsBtn\").removeAttr(\"disabled\");\n  $(\"#loadZoneBtn\").click(loadZoneModels);\n  $(\"#loadZoneBtn\").removeAttr(\"disabled\");\n  $(\"#mvntSpeedRange\").removeAttr(\"disabled\");\n  $(\"#mvntSpeedRange\").change((event) => mapRenderer.setMovementSpeed(event.target.valueAsNumber));\n  $(\"#fogRange\").removeAttr(\"disabled\");\n  $(\"#fogRange\").change((event) => {\n    mapRenderer.setFog(event.target.valueAsNumber);\n  });\n  $(\"#controllerReset\").click(() => mapRenderer.setupController());\n  $(\"#controllerReset\").removeAttr(\"disabled\");\n\n  $(\"canvas\").on(\"wheel\", onMouseWheel);\n\n  mapRenderer.loadMap($(\"#fileMapSelect\").val());\n\n  $(\"#fileMapSelect\").prop(\"disabled\", true);\n\n  /// Setup the logger (hacky way because very verbose)\n  T3D.Logger.logFunctions[T3D.Logger.TYPE_PROGRESS] = function () {\n    myLogger.log(arguments[0], arguments[0], arguments[1]);\n    console.log(arguments[0], arguments[1]);\n  };\n}\n\n/// Action when the load zone props button is clicked\nfunction loadZoneModels() {\n  const buttonId = \"#loadZoneBtn\";\n  if (!mapRenderer.isZoneModelsLoaded()) {\n    mapRenderer.loadZoneModels(function () {\n      mapRenderer.toggleZoneModels();\n      $(buttonId)[0].innerHTML = $(buttonId)[0].innerHTML.replace(\"Load\", \"Unload\");\n    });\n  } else {\n    mapRenderer.toggleZoneModels();\n    $(buttonId)[0].innerHTML = $(buttonId)[0].innerHTML.replace(\"Unload\", \"Load\");\n  }\n}\n\n/// Action when the load props button is clicked\nfunction loadPropModels() {\n  const buttonId = \"#loadPropsBtn\";\n  if (!mapRenderer.isPropModelsLoaded()) {\n    mapRenderer.loadPropModels(function () {\n      mapRenderer.togglePropModels();\n      $(buttonId)[0].innerHTML = $(buttonId)[0].innerHTML.replace(\"Load\", \"Unload\");\n    });\n  } else {\n    mapRenderer.togglePropModels();\n    $(buttonId)[0].innerHTML = $(buttonId)[0].innerHTML.replace(\"Unload\", \"Load\");\n  }\n}\n\n/// Action when the load collisions button is clicked\nfunction loadCollModels() {\n  const buttonId = \"#loadCollBtn\";\n  if (!mapRenderer.isCollModelsLoaded()) {\n    mapRenderer.loadCollModels(function () {\n      mapRenderer.toggleCollModels();\n      $(buttonId)[0].innerHTML = $(buttonId)[0].innerHTML.replace(\"Load\", \"Unload\");\n    });\n  } else {\n    mapRenderer.toggleCollModels();\n    $(buttonId)[0].innerHTML = $(buttonId)[0].innerHTML.replace(\"Unload\", \"Load\");\n  }\n}\n\nfunction onMouseWheel(event) {\n  let newSpeed;\n  if (event.originalEvent.deltaY < 0) {\n    newSpeed = Math.min(mapRenderer.getMovementSpeed() + 100, 10000);\n  } else {\n    newSpeed = Math.max(mapRenderer.getMovementSpeed() - 100, 500);\n  }\n  mapRenderer.setMovementSpeed(newSpeed);\n  $(\"#mvntSpeedRange\").val(newSpeed);\n}\n","class AppRenderer {\n  constructor(logger) {\n    this.logger = logger;\n\n    /// This example is very inspired by the ModelRenderer example but updated\n    /// using the latest version of the API. This global object for the app contains\n    /// all the important data.\n\n    /// All renderers must have access to a LocalReader.\n    /// The LocalReader is the object that allows us\n    /// to read from the .dat\n    this.localReader = null;\n\n    /// The context is an object all the renderer outputs their data to\n    this.context = null;\n\n    /// THREE js objects\n    this.scene = null;\n    this.skyScene = null;\n    this.camera = null;\n    this.skyCamera = null;\n    this.renderer = null;\n    this.clock = null;\n    this.mouse = null;\n    this.controls = null;\n    this.controlsEnabled = false;\n\n    /// Data:\n    this._cleanMapData();\n  }\n\n  /**\n   * Public methods\n   */\n  createLocalReader(file, callback) {\n    this.localReader = T3D.getLocalReader(file, callback, \"../static/t3dworker.js\", this.logger);\n  }\n\n  getMapList() {\n    return this.localReader.getMapList();\n  }\n\n  // Setup schene\n  init() {\n    const canvasWidth = window.innerWidth;\n    const canvasHeight = window.innerHeight;\n    const canvasClearColor = 0x342920; // For happy rendering, always use Van Dyke Brown.\n    const fov = 60;\n    const aspect = canvasWidth / canvasHeight;\n    const fogDistance = Number($(\"#fogRange\").val());\n\n    this.camera = new THREE.PerspectiveCamera(fov, aspect, 0.1, 100000);\n    this.skyCamera = new THREE.PerspectiveCamera(fov, aspect, 0.1, 1000000);\n    this.scene = new THREE.Scene();\n    this.skyScene = new THREE.Scene();\n    this.mouse = new THREE.Vector2();\n\n    this.clock = new THREE.Clock();\n    /// This scene has one ambient light source and three directional lights\n    const ambientLight = new THREE.AmbientLight(0x555555);\n    this.scene.add(ambientLight);\n\n    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight1.position.set(0, 0, 1);\n    this.scene.add(directionalLight1);\n\n    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight2.position.set(1, 0, 0);\n    this.scene.add(directionalLight2);\n\n    const directionalLight3 = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight3.position.set(0, 1, 0);\n    this.scene.add(directionalLight3);\n\n    // Fog\n    this.scene.fog = new THREE.Fog(0xffffff, fogDistance, fogDistance + 1000);\n    this.camera.far = fogDistance + 1000;\n    this.camera.updateProjectionMatrix();\n\n    /// Standard THREE renderer with AA\n    this.renderer = new THREE.WebGLRenderer({\n      antialiasing: true,\n      logarithmicDepthBuffer: true,\n      sortObjects: false,\n      stencil: false,\n      premultipliedAlpha: false,\n    });\n    this.renderer.autoClear = false;\n    document.body.appendChild(this.renderer.domElement);\n    this.renderer.setSize(canvasWidth, canvasHeight);\n    this.renderer.setClearColor(canvasClearColor);\n\n    window.addEventListener(\"resize\", () => {\n      const SCREEN_HEIGHT = window.innerHeight;\n      const SCREEN_WIDTH = window.innerWidth;\n\n      this.camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;\n      this.camera.updateProjectionMatrix();\n      this.skyCamera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;\n      this.skyCamera.updateProjectionMatrix();\n\n      this.renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n    });\n\n    this.setupController();\n\n    /// Note: constant continous rendering from page load\n    this._render();\n  }\n\n  isCollModelsLoaded() {\n    this.mapData.collision.loaded;\n  }\n\n  isPropModelsLoaded() {\n    return this.mapData.props.loaded;\n  }\n\n  isZoneModelsLoaded() {\n    return this.mapData.zone.loaded;\n  }\n\n  loadMap(mapId) {\n    // Clean previous render states\n    this._cleanMapData();\n    this.mapData.id = mapId;\n\n    /// Renderer settings (see the documentation of each Renderer for details)\n    const renderers = [\n      {\n        renderClass: T3D.EnvironmentRenderer,\n        settings: {},\n      },\n      {\n        renderClass: T3D.TerrainRenderer,\n        settings: {},\n      },\n    ];\n    /// Load for the first time the renderer and spawn the context\n    T3D.renderMapContentsAsync(\n      this.localReader,\n      this.mapData.id,\n      renderers,\n      (context) => {\n        this._onRendererDone(context);\n      },\n      this.logger\n    );\n\n    // Cache mapFile for later use\n    if (parseInt(this.mapData.id)) {\n      this.localReader.loadFile(this.mapData.id, (arrayBuffer) => {\n        const ds = new DataStream(arrayBuffer, 0, DataStream.LITTLE_ENDIAN);\n        this.mapData.mapFile = new T3D.GW2File(ds, 0);\n      });\n    }\n  }\n\n  loadZoneModels(callback) {\n    this._loadMeshes(T3D.ZoneRenderer, this.mapData.zone, callback);\n  }\n\n  loadPropModels(callback) {\n    this._loadMeshes(T3D.PropertiesRenderer, this.mapData.props, callback);\n  }\n\n  loadCollModels(callback) {\n    this._loadMeshes(T3D.HavokRenderer, this.mapData.collision, callback);\n  }\n\n  setFog(fogDistance) {\n    if (this.scene && this.scene.fog) {\n      this.scene.fog.near = fogDistance;\n      this.scene.fog.far = fogDistance + 1000;\n    }\n    if (this.camera) {\n      this.camera.far = fogDistance + 1000;\n      this.camera.updateProjectionMatrix();\n    }\n  }\n\n  setMovementSpeed(speed) {\n    if (this.controls) {\n      this.controls.movementSpeed = speed;\n    }\n  }\n\n  getMovementSpeed() {\n    if (this.controls) {\n      return this.controls.movementSpeed;\n    }\n\n    return 0;\n  }\n\n  toggleZoneModels() {\n    return this._toggleModels(\"zone\");\n  }\n\n  togglePropModels() {\n    return this._toggleModels(\"props\");\n  }\n\n  toggleCollModels() {\n    return this._toggleModels(\"collision\");\n  }\n\n  /**\n   * Private methods\n   */\n\n  _cleanMapData() {\n    this.mapData = {\n      id: null,\n      mapFile: null,\n      terrain: {\n        data: [],\n      },\n      collision: {\n        enabled: false,\n        loaded: false,\n        data: [],\n      },\n      props: {\n        enabled: false,\n        loaded: false,\n        data: [],\n      },\n      zone: {\n        enabled: false,\n        loaded: false,\n        data: [],\n      },\n    };\n  }\n\n  /// Wipes out the data\n  _cleanScene() {\n    for (const type of [\"terrain\", \"props\", \"zone\", \"collision\"]) {\n      for (const elem of this.mapData[type].data) {\n        this.scene.remove(elem);\n      }\n      this.mapData[type].data = [];\n    }\n\n    for (const type of [\"props\", \"zone\", \"collision\"]) {\n      this.mapData[type].loaded = false;\n      this.mapData[type].enabled = false;\n    }\n  }\n\n  /// Run a renderer manually and populates the data object\n  _loadMeshes(rendererClass, outRendererData, callback) {\n    T3D.runRenderer(\n      rendererClass,\n      this.localReader,\n      { visible: true, mapFile: this.mapData.mapFile, showUnmaterialized: false },\n      this.context,\n      () => {\n        outRendererData.data = T3D.getContextValue(this.context, rendererClass, \"meshes\");\n        outRendererData.loaded = true;\n        callback();\n      }\n    );\n  }\n\n  setupController() {\n    if (this.controls) {\n      this.controls.dispose();\n    }\n\n    const controls = new THREE.FlyControls(this.camera, this.renderer.domElement);\n\n    controls.movementSpeed = Number($(\"#mvntSpeedRange\").val()) | 1000;\n    controls.domElement = this.renderer.domElement;\n    controls.rollSpeed = Math.PI / 6;\n    controls.autoForward = false;\n    controls.dragToLook = true;\n    this.controls = controls;\n  }\n\n  _render() {\n    global.stats.update();\n    window.requestAnimationFrame(() => this._render());\n\n    const delta = this.clock.getDelta();\n    this.controls.update(delta);\n\n    // Render first skyCamera\n    this.skyCamera.quaternion.copy(this.camera.quaternion);\n    this.renderer.clear(this.renderer.getClearColor());\n    this.renderer.render(this.skyScene, this.skyCamera);\n\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  _toggleModels(meshType) {\n    if (this.mapData[meshType].enabled) {\n      for (const elem of this.mapData[meshType].data) {\n        this.scene.remove(elem);\n      }\n      this.mapData[meshType].enabled = false;\n      return false;\n    } else {\n      for (const elem of this.mapData[meshType].data) {\n        this.scene.add(elem);\n      }\n      this.mapData[meshType].enabled = true;\n      return true;\n    }\n  }\n\n  /// Runs when the ModelRenderer is finished\n  _onRendererDone(context) {\n    this._cleanScene();\n\n    /// Populate our context with the context returned\n    this.context = context;\n\n    /// Take all the terrain tiles generated by the TerrainRenderer and add them to the scene\n    for (const elem of T3D.getContextValue(context, T3D.TerrainRenderer, \"terrainTiles\")) {\n      this.scene.add(elem);\n      this.mapData.terrain.data.push(elem);\n    }\n\n    /// Skybox\n    const skyBox = T3D.getContextValue(context, T3D.EnvironmentRenderer, \"skyBox\");\n    this.skyScene.add(skyBox);\n    const hazeColor = T3D.getContextValue(context, T3D.EnvironmentRenderer, \"hazeColor\");\n    if (hazeColor) {\n      this.renderer.setClearColor(new THREE.Color(hazeColor[2] / 255, hazeColor[1] / 255, hazeColor[0] / 255));\n    }\n\n    /// Add the water level to the scene\n    const water = T3D.getContextValue(context, T3D.TerrainRenderer, \"water\");\n    this.scene.add(water);\n    this.mapData.terrain.data.push(water);\n\n    /// Move the camera initial place depending on the map bounds\n    const bounds = T3D.getContextValue(context, T3D.TerrainRenderer, \"bounds\");\n    this.camera.position.x = 0;\n    this.camera.position.y = bounds ? bounds.y2 : 0;\n    this.camera.position.z = 0;\n    this.camera.rotation.x = (-90 * Math.PI) / 180;\n  }\n}\n\nmodule.exports = AppRenderer;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}