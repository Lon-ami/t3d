{"version":3,"sources":["SimpleMapRenderer/node_modules/browser-pack/_prelude.js","SimpleMapRenderer/src/SimpleMapRenderer/index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/// This example is very inspired by the ModelRenderer example but updated\n/// using the latest version of the API. This global object for the app contains\n/// all the important data.\nconst cleanMapData = {\n  id: null,\n  mapFile: null,\n  terrain: {\n    data: [],\n  },\n  props: {\n    enabled: false,\n    loaded: false,\n    data: [],\n  },\n};\n\nconst mapRenderer = {\n  /// All renderers must have access to a LocalReader.\n  /// The LocalReader is the object that allows us\n  /// to read from the .dat\n  localReader: null,\n\n  /// The context is an object all the renderer outputs their data to\n  context: null,\n\n  /// THREE js objects\n  scene: null,\n  camera: null,\n  renderer: null,\n  mouse: null,\n  controls: null,\n\n  /// Data:\n  mapData: Object.assign({}, cleanMapData),\n};\n\n/// Extend Original Logger\nconst myLogger = {\n  lastMessageType: null,\n  log: function () {\n    const htmlOutput = $(\"#log\");\n    const str = Array.prototype.slice.call(arguments, 1).join(\" \");\n    if (arguments[1] === myLogger.lastMessageType) {\n      $(\"#log p:last-of-type\")[0].innerHTML = str;\n    } else {\n      htmlOutput.append($(\"<p>-------------</p>\"));\n      htmlOutput.append($(\"<p>\" + str + \"</p>\"));\n    }\n    htmlOutput[0].scrollTop = htmlOutput[0].scrollHeight;\n    myLogger.lastMessageType = arguments[1];\n  },\n};\n\n$(document).ready(function () {\n  /// Build TREE scene\n  setupScene();\n\n  /// Handle file pick\n  $(\"#filePicker\").change(function (evt) {\n    const file = evt.target.files[0];\n\n    mapRenderer.localReader = T3D.getLocalReader(file, onReaderCreated, \"../static/t3dworker.js\", myLogger);\n  });\n\n  /// Handle button click\n  $(\"#loadMapBtn\").click(onLoadMapClick);\n});\n\n/// Callback for when the LocalReader has finished setting up!\nasync function onReaderCreated() {\n  $(\"#fileIdInput\").removeAttr(\"disabled\");\n  $(\"#fileMapSelect\").removeAttr(\"disabled\");\n  $(\"#loadMapBtn\").removeAttr(\"disabled\");\n\n  const opt = document.createElement(\"option\");\n  opt.value = undefined;\n  opt.innerHTML = \"\"; // whatever property it has\n  $(\"#fileMapSelect\").append(opt);\n\n  const mapFileList = await mapRenderer.localReader.getMapList();\n  const categoryList = mapFileList.reduce((list, map) => {\n    if (!list.includes(map.category)) {\n      list.push(map.category);\n    }\n    return list;\n  }, []);\n  for (const category of categoryList) {\n    const opt = document.createElement(\"option\");\n    opt.disabled = true;\n    opt.innerHTML = category;\n    $(\"#fileMapSelect\").append(opt);\n\n    for (const map of mapFileList.filter((m) => m.category === category)) {\n      const opt = document.createElement(\"option\");\n      opt.value = map.baseId;\n      opt.innerHTML = map.name; // whatever property it has\n\n      // then append it to the select element\n      $(\"#fileMapSelect\").append(opt);\n    }\n  }\n}\n\n/// The insterresting part!\nfunction onLoadMapClick() {\n  // Clean previous render states\n  mapRenderer.mapData = Object.assign({}, cleanMapData);\n\n  /// Get selected file id\n  mapRenderer.mapData.id = $(\"#fileIdInput\").val();\n\n  /// Renderer settings (see the documentation of each Renderer for details)\n  const renderers = [\n    {\n      renderClass: T3D.EnvironmentRenderer,\n      settings: {},\n    },\n    {\n      renderClass: T3D.TerrainRenderer,\n      settings: {},\n    },\n    {\n      renderClass: T3D.PropertiesRenderer,\n      settings: {\n        visible: true,\n        showUnmaterialized: true,\n      },\n    },\n  ];\n\n  /// Setup the logger (hacky way because very verbose)\n  T3D.Logger.logFunctions[T3D.Logger.TYPE_PROGRESS] = function () {\n    myLogger.log(arguments[0], arguments[0], arguments[1]);\n    console.log(arguments[0], arguments[1]);\n  };\n\n  /// Load for the first time the renderer and spawn the context\n  T3D.renderMapContentsAsync(mapRenderer.localReader, mapRenderer.mapData.id, renderers, onRendererDone, myLogger);\n\n  /// And store the mapfile for future use\n  loadMapFile(mapRenderer.mapData.id, function (data) {\n    mapRenderer.mapData.mapFile = data;\n  });\n}\n\n/// Runs when the ModelRenderer is finshed\nfunction onRendererDone(context) {\n  document.addEventListener(\"mousemove\", onMouseMove, false);\n  cleanScene();\n\n  /// Populate our context with the context returned\n  mapRenderer.context = context;\n\n  /// Take all the terrain tiles generated by the TerrainRenderer and add them to the scene\n  for (const elem of T3D.getContextValue(context, T3D.TerrainRenderer, \"terrainTiles\")) {\n    mapRenderer.scene.add(elem);\n    mapRenderer.mapData.terrain.data.push(elem);\n  }\n\n  /// Skybox\n  const hazeColor = T3D.getContextValue(context, T3D.EnvironmentRenderer, \"hazeColor\");\n  if (hazeColor) {\n    mapRenderer.renderer.setClearColor(new THREE.Color(hazeColor[2] / 255, hazeColor[1] / 255, hazeColor[0] / 255));\n  }\n\n  /// Add the water level to the scene\n  const water = T3D.getContextValue(context, T3D.TerrainRenderer, \"water\");\n  mapRenderer.scene.add(water);\n  mapRenderer.mapData.terrain.data.push(water);\n\n  /// Move the camera initial place depending on the map bounds\n  const bounds = T3D.getContextValue(context, T3D.TerrainRenderer, \"bounds\");\n  mapRenderer.camera.position.x = 0;\n  mapRenderer.camera.position.y = bounds ? bounds.y2 : 0;\n  mapRenderer.camera.position.z = 0;\n\n  /// Add all the meshes from the prop renderer\n  const propsMeshes = T3D.getContextValue(context, T3D.PropertiesRenderer, \"meshes\");\n  for (const elem of propsMeshes) {\n    mapRenderer.scene.add(elem);\n    mapRenderer.mapData.props.data.push(elem);\n  }\n}\n\n/// It's usually not needed to keep the mapFile independently but\n/// because we're loading the colision/props/zone models manually, it is.\nfunction loadMapFile(fileId, callback) {\n  if (parseInt(fileId)) {\n    mapRenderer.localReader.loadFile(fileId, function (arrayBuffer) {\n      const ds = new DataStream(arrayBuffer, 0, DataStream.LITTLE_ENDIAN);\n      const mapFile = new T3D.GW2File(ds, 0);\n      callback(mapFile);\n    });\n  }\n}\n\n/// Wipes out the data\nfunction cleanScene() {\n  for (const type of [\"terrain\", \"props\"]) {\n    for (const elem of mapRenderer.mapData[type].data) {\n      mapRenderer.scene.remove(elem);\n    }\n    mapRenderer.mapData[type].data = [];\n  }\n\n  for (const type of [\"props\"]) {\n    mapRenderer.mapData[type].loaded = false;\n    mapRenderer.mapData[type].enabled = false;\n  }\n}\n\nfunction onMouseMove(event) {\n  const canvasBounds = mapRenderer.renderer.domElement.getBoundingClientRect();\n  mapRenderer.mouse.x = ((event.clientX - canvasBounds.left) / (canvasBounds.right - canvasBounds.left)) * 2 - 1;\n  mapRenderer.mouse.y = -((event.clientY - canvasBounds.top) / (canvasBounds.bottom - canvasBounds.top)) * 2 + 1;\n}\n\n/// Basic THREE stuff, don't mind it\nfunction setupScene() {\n  const canvasWidth = 800;\n  const canvasHeight = 800;\n  const canvasClearColor = 0x342920; // For happy rendering, always use Van Dyke Brown.\n  const fov = 60;\n  const aspect = 1;\n\n  mapRenderer.camera = new THREE.PerspectiveCamera(fov, aspect, 0.1, 100000);\n  mapRenderer.scene = new THREE.Scene();\n  mapRenderer.mouse = new THREE.Vector2();\n\n  /// This scene has one ambient light source and three directional lights\n  const ambientLight = new THREE.AmbientLight(0x555555);\n  mapRenderer.scene.add(ambientLight);\n\n  const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8);\n  directionalLight1.position.set(0, 0, 1);\n  mapRenderer.scene.add(directionalLight1);\n\n  const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.8);\n  directionalLight2.position.set(1, 0, 0);\n  mapRenderer.scene.add(directionalLight2);\n\n  const directionalLight3 = new THREE.DirectionalLight(0xffffff, 0.8);\n  directionalLight3.position.set(0, 1, 0);\n  mapRenderer.scene.add(directionalLight3);\n\n  /// Standard THREE renderer with AA\n  mapRenderer.renderer = new THREE.WebGLRenderer({\n    antialiasing: true,\n    logarithmicDepthBuffer: true,\n  });\n  document.body.appendChild(mapRenderer.renderer.domElement);\n  mapRenderer.renderer.setSize(canvasWidth, canvasHeight);\n  mapRenderer.renderer.setClearColor(canvasClearColor);\n\n  setupController();\n\n  /// Note: constant continous rendering from page load\n  render();\n}\n\nfunction setupController() {\n  if (!mapRenderer.controls) {\n    const controls = new THREE.OrbitControls(mapRenderer.camera, mapRenderer.renderer.domElement);\n    controls.enableZoom = true;\n    mapRenderer.controls = controls;\n  }\n}\n\nfunction render() {\n  window.requestAnimationFrame(render);\n  mapRenderer.renderer.render(mapRenderer.scene, mapRenderer.camera);\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}