{"version":3,"sources":["ModelRenderer/node_modules/browser-pack/_prelude.js","ModelRenderer/src/ModelRenderer/index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/// This is an example application for the T3D library\n/// Skip down to onButtonClick to get to the juicy part\n/// This will be updated sooner or later, perhaps with a\n/// written guide, who knows.\n\nlet _lr;\nlet _context;\nlet _scene;\nlet _camera;\nlet _renderer;\nlet _models = [];\n\n/// Extend Original Logger\nconst myLogger = {\n  log: function () {\n    const htmlOutput = $(\"#log\");\n    let i = 1;\n    let str = \"\";\n    while (i < arguments.length) {\n      str += arguments[i];\n      i++;\n    }\n    htmlOutput.append($(\"<p>\" + str + \"</p>\"));\n    htmlOutput.append($(\"<p>-------------</p>\"));\n  },\n};\n\n$(document).ready(function () {\n  /// Build TREE scene\n  setupScene();\n\n  /// Handle file pick\n  $(\"#filePicker\").change(function (evt) {\n    const file = evt.target.files[0];\n\n    _lr = T3D.getLocalReader(file, onReaderCreated, \"../static/t3dworker.js\", myLogger);\n  });\n\n  /// Handle button click\n  $(\"#loadModelBtn\").click(onButtonClick);\n});\n\n/// Callback for when the LocalReader has finished setting up!\nfunction onReaderCreated() {\n  $(\"#fileIdInput\").removeAttr(\"disabled\");\n  $(\"#loadModelBtn\").removeAttr(\"disabled\");\n}\n\n/// The insterresting part!\nfunction onButtonClick() {\n  /// Get selected file id\n  const fileId = $(\"#fileIdInput\").val();\n\n  /// Let's use the SingleModelRenderer. It renders 3D stuff!\n  const renderClass = T3D.SingleModelRenderer;\n\n  /// All renderers must have access to a LocalReader.\n  /// The LocalReader is the object that allows us\n  /// to read from the .dat\n  const localReader = _lr;\n\n  /// The settings object is different for all renderers.\n  /// Accourding to documentation the SingleModelRenderer requires\n  /// the id of a file.\n  const settings = { id: fileId };\n\n  /// This is the value object that renderers use to write output!\n  /// If we ran multiple renderers that wanted to read output from\n  /// each other we'd have to pass this object to each Renderer!\n  /// Note that we'll want to access this object later, so make\n  /// sure it's stored in a scope we can reach from the callback\n  /// method.\n  _context = {};\n\n  /// The method to run when the renderer is done. Almost all\n  /// renderers are asynchronous since there is a lot of file\n  /// reading et cetera.\n  const callback = onRendererDone;\n\n  /// Running a renderer takes 5 mandatory parameters! Phew!\n  T3D.runRenderer(renderClass, localReader, settings, _context, callback);\n}\n\n/// Runs when the SingleModelRenderer is finshed\nfunction onRendererDone() {\n  /// Remove old models from the 3D scene\n  _models.forEach(function (mdl) {\n    _scene.remove(mdl);\n  });\n\n  /// Now we want to take a look in the output object!\n  /// The object we told the renderer to write to was _context\n  const readFromContext = _context;\n\n  /// The generator class we want output for is SingleModelRenderer\n  const readForClass = T3D.SingleModelRenderer;\n\n  /// The documentation says the generated outputs are:\n  ///\n  /// meshes : An array of THREE.Mesh objects visualizing this model file.\n  ///\n  /// Lets get that one!\n  const nameOfValue = \"meshes\";\n\n  /// Let's go!\n  _models = T3D.getContextValue(readFromContext, readForClass, nameOfValue);\n\n  /// From here on it's just THREE stuff:\n\n  /// Keeping track of the biggest model for later\n  let biggestMdl = null;\n\n  /// Add all models to the scene\n  _models.forEach(function (model) {\n    /// Find the biggest model for camera focus/fitting\n    if (!biggestMdl || biggestMdl.boundingSphere.radius < model.boundingSphere.radius) {\n      biggestMdl = model;\n    }\n\n    _scene.add(model);\n  });\n\n  _camera.position.x = 200;\n  _camera.position.y = 50;\n\n  /// Focus camera to the bigest model\n  if (biggestMdl) _camera.lookAt(biggestMdl.position);\n}\n\n/// Basic THREE stuff, don't mind it\nfunction setupScene() {\n  const canvasWidth = 500;\n  const canvasHeight = 500;\n  const canvasClearColor = 0x342920; // For happy rendering, always use Van Dyke Brown.\n  const fov = 60;\n  const aspect = 1;\n  const near = 0.1;\n  const far = 50000;\n\n  _camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n\n  _scene = new THREE.Scene();\n\n  /// This scene has one ambient light source and three directional lights\n  const ambientLight = new THREE.AmbientLight(0x555555);\n  _scene.add(ambientLight);\n\n  const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8);\n  directionalLight1.position.set(0, 0, 1);\n  _scene.add(directionalLight1);\n\n  const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.8);\n  directionalLight2.position.set(1, 0, 0);\n  _scene.add(directionalLight2);\n\n  const directionalLight3 = new THREE.DirectionalLight(0xffffff, 0.8);\n  directionalLight3.position.set(0, 1, 0);\n  _scene.add(directionalLight3);\n\n  /// Standard THREE renderer with AA\n  _renderer = new THREE.WebGLRenderer({ antialiasing: true });\n  document.body.appendChild(_renderer.domElement);\n  _renderer.setSize(canvasWidth, canvasHeight);\n  _renderer.setClearColor(canvasClearColor);\n\n  /// Add THREE orbit controls, for simple orbiting, panning and zooming\n  const orbit = new THREE.OrbitControls(_camera, _renderer.domElement);\n  orbit.enableZoom = true;\n\n  /// Note: constant continous rendering from page load\n  render();\n}\n\nfunction render() {\n  window.requestAnimationFrame(render);\n  _renderer.render(_scene, _camera);\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}